import 'package:flutter/material.dart';
import 'package:shop_app/models/http_exception.dart';
import './product.dart';
import 'package:http/http.dart'as http;
import 'dart:convert';

class Products with ChangeNotifier{
  List<Product> _items=[
    // Product(
    //   id: 'p1',
    //   title: 'Red Shirt',
    //   description: 'A good Red Shirt',
    //   price: 800,
    //   imageUrl: 'https://www.dhresource.com/600x600/f2/albu/g9/M00/61/81/rBVaVV4O4luAUsUgAACwoA454QY078.jpg'
    // ),
    // Product(
    //   id: 'p2',
    //   title: 'White Shirt',
    //   description: 'A good White Shirt',
    //   price: 800,
    //   imageUrl: 'https://www.dhresource.com/600x600/f2/albu/g9/M00/61/81/rBVaVV4O4luAUsUgAACwoA454QY078.jpg'
    // ),
    // Product(
    //   id: 'p3',
    //   title: 'Blue Shirt',
    //   description: 'A good Blue Shirt',
    //   price: 800,
    //   imageUrl: 'https://www.dhresource.com/600x600/f2/albu/g9/M00/61/81/rBVaVV4O4luAUsUgAACwoA454QY078.jpg'
    // ),
    // Product(
    //   id: 'p4',
    //   title: 'Black Shirt',
    //   description: 'A good Black Shirt',
    //   price: 800,
    //   imageUrl: 'https://www.dhresource.com/600x600/f2/albu/g9/M00/61/81/rBVaVV4O4luAUsUgAACwoA454QY078.jpg'
    // ),
  ];

  //bool _showFav=false;

  List<Product> get items{
    // if(_showFav){
    //   return _items.where((test)=>test.isFav).toList();
    // }
    return [..._items];
  }

  final String authToken;
  final String userId;
  Products(this.authToken,this.userId,this._items);

  List<Product> get favorites{
    return _items.where((test)=>test.isFav).toList();
  }

  // void showFavOnly(){
  //   _showFav=true;
  //   notifyListeners();
  // }

  // void showAll(){
  //   _showFav=false;
  //   notifyListeners();
  // }

  Product findById(String id){
    return _items.firstWhere((prod)=>prod.id==id);
  }

  Future<void> fetchProducts([bool filter = false]) async {
    final filterString = filter ? 'orderBy="userId"&equalTo="$userId"' : '';
    var url='https://shopapp-e6c8f.firebaseio.com/Products.json?auth=$authToken&$filterString';
    try{
      final response = await http.get(url);
      final data = json.decode(response.body) as Map<String,dynamic>;
      if(data==null){return;}
      url='https://shopapp-e6c8f.firebaseio.com/userFavorites/$userId.json?auth=$authToken';
      final favoriteResponse = await http.get(url);
      final favoriteData = json.decode(favoriteResponse.body);
      final List<Product> loadedProd=[];
      data.forEach((id,da){
        loadedProd.add(Product(
          id: id,
          title: da['title'],
          description: da['description'],
          isFav: favoriteData==null?false:favoriteData[id] ?? false,
          imageUrl: da['imageUrl'],
          price: da['price']
        ));
      });
      _items=loadedProd;
      notifyListeners();
    }catch(error){
      print(error);
      throw(error);
    }
  }

  Future<void> addProduct(Product p) async{
    final url='https://shopapp-e6c8f.firebaseio.com/Products.json?auth=$authToken';
    try{
    final response = await http.post(url,body: json.encode({
      'title':p.title,
      'description':p.description,
      'price':p.price,
      'imageUrl':p.imageUrl,
      'userId':userId
    }));
    final newProduct = Product(
      description: p.description,
      id: json.decode(response.body)['name'],
      title: p.title,
      imageUrl: p.imageUrl,
      price: p.price
    );
    _items.add(newProduct);
    notifyListeners();
    }catch(error){
      throw error;
    }

    // return http.post(url,body: json.encode({
    //   'title':p.title,
    //   'description':p.description,
    //   'price':p.price,
    //   'isFav':p.isFav,
    //   'imageUrl':p.imageUrl
    // })).then((response){
    //   //print(json.decode(response.body)); map of unique id generated by firebase
    //   final newProduct = Product(
    //     description: p.description,
    //     id: json.decode(response.body)['name'],
    //     title: p.title,
    //     imageUrl: p.imageUrl,
    //     price: p.price
    //   );
    //   _items.add(newProduct);
    //   notifyListeners();
    // }).catchError((error){
    //   throw error;
    // });
  }

  Future<void> updateProduct(String id,Product p)async{
    final i=_items.indexWhere((test)=>test.id==id);
    if(i>=0){
      final url='https://shopapp-e6c8f.firebaseio.com/Products/$id.json?auth=$authToken';
      await http.patch(url,body: json.encode({
        'title':p.title,
        'description':p.description,
        'price':p.price,
        'imageUrl':p.imageUrl
      }));
      _items[i]=p;
      notifyListeners();
    }
  }

  void deleteProduct(String id){
    final url='https://shopapp-e6c8f.firebaseio.com/Products/$id.json?auth=$authToken';
    final existingProductIndex = _items.indexWhere((test)=>test.id==id);
    var existingProduct = _items[existingProductIndex];
    _items.removeAt(existingProductIndex);
    http.delete(url).then((response){
      if(response.statusCode>=400){
        throw HttpException('An error Occured');
      }
      existingProduct=null;
    }).catchError((_){
      _items.insert(existingProductIndex, existingProduct);
      notifyListeners();
    });
    
    notifyListeners();
  }
}